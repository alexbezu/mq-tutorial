// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pb/mq.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MQserviceClient is the client API for MQservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MQserviceClient interface {
	MQput(ctx context.Context, in *MQputRequest, opts ...grpc.CallOption) (*MQputReply, error)
	MQpop(ctx context.Context, in *MQpopRequest, opts ...grpc.CallOption) (*MQpopReply, error)
}

type mQserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewMQserviceClient(cc grpc.ClientConnInterface) MQserviceClient {
	return &mQserviceClient{cc}
}

func (c *mQserviceClient) MQput(ctx context.Context, in *MQputRequest, opts ...grpc.CallOption) (*MQputReply, error) {
	out := new(MQputReply)
	err := c.cc.Invoke(ctx, "/pb.MQservice/MQput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQserviceClient) MQpop(ctx context.Context, in *MQpopRequest, opts ...grpc.CallOption) (*MQpopReply, error) {
	out := new(MQpopReply)
	err := c.cc.Invoke(ctx, "/pb.MQservice/MQpop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MQserviceServer is the server API for MQservice service.
// All implementations must embed UnimplementedMQserviceServer
// for forward compatibility
type MQserviceServer interface {
	MQput(context.Context, *MQputRequest) (*MQputReply, error)
	MQpop(context.Context, *MQpopRequest) (*MQpopReply, error)
	mustEmbedUnimplementedMQserviceServer()
}

// UnimplementedMQserviceServer must be embedded to have forward compatible implementations.
type UnimplementedMQserviceServer struct {
}

func (UnimplementedMQserviceServer) MQput(context.Context, *MQputRequest) (*MQputReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MQput not implemented")
}
func (UnimplementedMQserviceServer) MQpop(context.Context, *MQpopRequest) (*MQpopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MQpop not implemented")
}
func (UnimplementedMQserviceServer) mustEmbedUnimplementedMQserviceServer() {}

// UnsafeMQserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MQserviceServer will
// result in compilation errors.
type UnsafeMQserviceServer interface {
	mustEmbedUnimplementedMQserviceServer()
}

func RegisterMQserviceServer(s grpc.ServiceRegistrar, srv MQserviceServer) {
	s.RegisterService(&MQservice_ServiceDesc, srv)
}

func _MQservice_MQput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MQputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQserviceServer).MQput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MQservice/MQput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQserviceServer).MQput(ctx, req.(*MQputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQservice_MQpop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MQpopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQserviceServer).MQpop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MQservice/MQpop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQserviceServer).MQpop(ctx, req.(*MQpopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MQservice_ServiceDesc is the grpc.ServiceDesc for MQservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MQservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MQservice",
	HandlerType: (*MQserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MQput",
			Handler:    _MQservice_MQput_Handler,
		},
		{
			MethodName: "MQpop",
			Handler:    _MQservice_MQpop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/mq.proto",
}
